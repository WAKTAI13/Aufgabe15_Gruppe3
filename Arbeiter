using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace ConsoleApplication1
{
    class Arbeiter
    {
        private char[,] feld;
        private int breite, laenge, puffer, bildrate, wiederholung;
        private Buggy buggy;
        public bool run;

        //Setzt das Array auf die übergebenen Werte
        public Arbeiter(/*char[,] gebegrid, int gebelaenge, int gebebreite, Buggy gebebuggy*/)
        {
            //Einstellungen
            run = true;
            breite = 20;
            laenge = 89;
            bildrate = 10;
            puffer = 10;


            //Berrechnete Werte
            buggy = new Buggy(laenge, breite);
            feld = new char[laenge, breite];
            wiederholung = 1000 / bildrate;
        }


        //Aktualisiert das Array
        public void aktualisieren()
        {
            starter(laenge, breite);
            while (run)
            {
                if (feld[puffer-1, breite-1] == 'H')
                {
                    loch();
                }
                runde(feld);
                Thread.Sleep(wiederholung);
            }
        }

        //Schreibt das Array in die Konsole
        public void zeichnen()
        {
            string zeile = "";
            while (run)
            {
                Console.Clear();

                for (int y = 0; y < breite; y++)
                {
                    for (int x = puffer; x < laenge; x++)
                    {
                        if (x == buggy.x && y == buggy.y)
                        {
                            zeile += '#';
                        }
                        else
                        {
                            zeile += feld[x, y];
                        }
                    }
                    Console.WriteLine(zeile);
                    zeile = "";
                }
                Thread.Sleep(wiederholung);
            }
        }



        //konstruiert das erste Array
        char[,] starter(int laenge, int breite)
        {
            for (int y = 0; y < breite; y++)
            {
                for (int x = 0; x < laenge; x++)
                {
                    feld[x, y] = ' ';
                    if (y == breite - 2)
                    {
                        feld[x, y] = 'T';
                    }
                    if (y == breite - 1)
                    {
                        feld[x, y] = '|';
                    }
                }
            }
            return feld;
        }

        //Lässt das Feld um ein Zeichen weiter nach rechts rückieren
        char[,] runde(char[,] altesfeld)
        {
            for (int y = 0; y < breite; y++)
            {
                for (int x = laenge - 2; x >= 0; x--)
                {
                    feld[x + 1, y] = altesfeld[x, y];
                    if (x - 1 < 0 || altesfeld[x, y] == 'H')
                    {
                        feld[x + 1, y] = 'H';
                    }
                }
            }
            return feld;
        }

        void loch()
        {
            Random lochzufall = new Random();
            int lochposition = lochzufall.Next(0, puffer);
            for (int y = 0; y < breite; y++)
            {
                for (int x = puffer; x >= 0; x--)
                {
                    feld[x, y] = ' ';
                    if (y == breite - 2)
                    {
                        feld[x, y] = 'T';
                    }
                    if (y == breite - 1)
                    {
                        feld[x, y] = '|';
                    }
                    feld[lochposition, breite - 2] = ' ';
                }
            }

        }

    }
}
